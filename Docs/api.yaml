openapi: 3.0.3
info:
  version: '1.0'
  title: La-Maody API
paths:
  '/ping':
    get:
      tags:
        - Default
      summary: pong
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /articles:
    get:
      tags:
        - Articles
      summary: Get all articles
      operationId: getAllArticles
      responses:
        '200':
          description: List of Articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /article:
    put:
      tags:
        - Article
      summary: Create new article or update existing article
      description: Update article when `id` are provided, create them otherwise.
      operationId: createOrUpdateArticle
      requestBody:
        description: Article to update
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/product'
      responses:
        '200':
          description: The created or updated article
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Article
      summary: remove article by Id
      description: remove article by provided id
      operationId: DeleteArticle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The identified article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/article/{id}':
    get:
      tags:
        - Article
      summary: Get article by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getArticleById
      responses:
        '200':
          description: The identified article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /item/{id_customer}:
    get:
      tags:
        - Customer
      summary: Get Customer's item in his/her bag by id
      operationId: getItemById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: an item found by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /item/{id_customer}/{id}:
      get:
        tags:
          - Customer
        summary: Get Customer's item in his/her bag by id
        operationId: getItemById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: an item found by id
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/product'
          '400':
            $ref: '#/components/responses/400'
          '403':
            $ref: '#/components/responses/403'
          '404':
            $ref: '#/components/responses/404'
          '429':
            $ref: '#/components/responses/429'
          '500':
            $ref: '#/components/responses/500'
    put:
      tags:
        - Customer
      summary: Add new article or update existing article in bags
      description: Update article when `id` are provided, create them otherwise.
      operationId: AddOrUpdateArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/product'
      responses:
        '200':
          description: The created or updated article
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Customer
      summary: remove an item
      description: When client was not persuaded,he remove from his bags
      operationId: RemoveItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/article'
      responses:
        '200':
          description: removed Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /product:
    get:
      tags:
        - Manager
      summary: Get all product
      operationId: getAllProduct
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: List of all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/article'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/product/{id}':
    get:
      tags:
        - Manager
      summary: Get items by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getItemById
      responses:
        '200':
          description: The identified item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Manager
      summary: Add new item or update existing item
      description: Update item when id are provided, create them otherwise.
      operationId: createOrUpdateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/article'
      responses:
        '200':
          description: The created or updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Manager
      summary: remove an item
      description: Caused by item's availability
      operationId: RemoveItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/article'
      responses:
        '200':
          description: removed Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /customer:
    get:
      tags:
        - Manager
      summary: Get all customer
      operationId: getAllCustomer
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: pageSize
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: List of customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /customer/{id}:
    get:
      tags:
        - Manager
      summary: Get Customer by id provided
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: an Client found by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /customer/{customer_id}/paying:
    get:
      tags:
        - Paying
      summary: Get client account by identifier
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      operationId: getCustomerById
      responses:
        '200':
          description: Identified customer's account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Paying
      summary: create or update client bags account
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      operationId: updateCustomerAccountById
      responses:
        '200':
          description: customer's account details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Customer:
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        bags_item:
          type: array
          items:
              $ref: "#/components/schemas/product"
        password:
          type: string
    Manager:
      allOf:
        - $ref: '#/components/schemas/Customer'
    Article:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: dress
        price:
          type: integer
        article_number:
          type: integer
    product:
      allOf:
        - $ref: '#/components/schemas/Article'
      type: object
      properties:
        id:
          type: string
        product_id:
          type: string
        status:
          type: string
          enum:
            - UNPAID
            - PAID
            - LATE
    CreatePayment:
      type: object
      properties:
        type:
          type: string
          enum:
            - CASH
            - MOBILE_MONEY
            - SCHOLARSHIP
            - FIX
        amount:
          type: integer
        comment:
          type: string
    Payment:
      allOf:
        - $ref: '#/components/schemas/CreatePayment'
      type: object
      properties:
        id:
          type: string
        product_id:
          type: string
        creation_datetime:
          type: string
          format: date-time
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error

